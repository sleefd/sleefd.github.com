<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design pattern | Bright Shine]]></title>
  <link href="http://sleefd.github.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://sleefd.github.com/"/>
  <updated>2014-01-21T20:02:29+08:00</updated>
  <id>http://sleefd.github.com/</id>
  <author>
    <name><![CDATA[slee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[适配器模式]]></title>
    <link href="http://sleefd.github.com/blog/2014/01/20/adapter-model/"/>
    <updated>2014-01-20T20:31:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2014/01/20/adapter-model</id>
    <content type="html"><![CDATA[<h4>什么是适配器</h4>

<p>以常见的电源适配器为例：比如手机的充电器
，笔记本电脑的电源。日常供电电压是220v,手机充电器将日常电压转
化成手机能用的电压（5v左右）,手机才能冲进电。
香港的笔记本电压是110v,而大陆的电压是220v,如果要让香港的笔记本电脑能在大陆充电要怎么做呢？
需要一个适配器将220v的电压输入转为110v输出，如此笔记本电脑才能充电。</p>

<!-- more -->


<p>因此适配器是一个转换器，将一种输入转化成另一种输出，将一个接口转化成另一个接口，
以较小的代价实现功能的复用。</p>

<h4>适配器模式及好处</h4>

<p>适配器模式是常见的设计模式之一。通过将现有接口转化成另一个需要的接口，
可以复用第三方组件或现有功能模块，避免重复功能的开发。</p>

<h4>适配器模式的实现方法</h4>

<p>使用适配器模式的目的是提供一个可用的接口。<br/>
因此需要一个接口类，定义我们需要的接口；<br/>
接着需要一个类实现这个接口，提供必须功能。这个类通常被称为Adapter。<br/>
当然还有一个类已经提供了我们所需功能的部分实现，需要被复用，称为Adaptee.<br/>
关键是Adapter如何复用Adaptee的功能。方法有两种：</p>

<ul>
<li>Adapter继承Adaptee<br/>
{% codeblock lang:java %}</li>
</ul>


<p>interface Functions
{</p>

<pre><code>public void f();
</code></pre>

<p>}</p>

<p>class Adaptee
{</p>

<pre><code>public void f(int )
{
    //do something....
}
</code></pre>

<p>}</p>

<p>class Adapter extends Adaptee implements Functions
{</p>

<pre><code>public void f()
{
    this.f(3);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>Adapter引用Adaptee类，包含一个Adaptee对象成员
{% codeblock lang:java %}</li>
</ul>


<p>class Adapter implements functions
{</p>

<pre><code>private Adaptee obj;
public void f()
{
    obj.f(3);
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
