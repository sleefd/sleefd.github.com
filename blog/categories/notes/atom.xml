<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | Bright Shine]]></title>
  <link href="http://sleefd.github.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://sleefd.github.com/"/>
  <updated>2014-02-17T12:02:58+08:00</updated>
  <id>http://sleefd.github.com/</id>
  <author>
    <name><![CDATA[slee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xml笔记]]></title>
    <link href="http://sleefd.github.com/blog/2013/05/08/xml-note/"/>
    <updated>2013-05-08T12:24:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2013/05/08/xml-note</id>
    <content type="html"><![CDATA[<p>大摩的IKM online test考到了xml，因此在w3school上学习了下xml.</p>

<p>xml: extensible markup language，可扩展标记语言</p>

<p>用来传输和存储结构化的数据，而html是负责表现数据。xml旨在传输信息，而html旨在显示信息。</p>

<p>xml的特点：纯文本，自解释性的，简化数据共享、传输</p>

<!-- more -->


<p>用在很多地方，比如web service, RSS等，很多应用程序使用xml交换数据。</p>

<p><strong>xml语法：</strong></p>

<ul>
<li><p>xml声明: <code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</code></p></li>
<li><p>xml的标签组成了树形结构</p>

<p>  必须有一个根元素。<br/>
元素之中可以有子元素，构成树形层次关系。<br/>
  元素之间的内容为文本节点。
  每个标签必须是闭合的。有<code>&lt;ele&gt;</code>,必有<code>&lt;/ele&gt;</code> 。 <br/>
  标签可以带有属性，属性必须用引号括起来，单引号双引号都可以，如<code>&lt;from date='1990-2-3'&gt;Jenny&lt;/from&gt;</code><br/>
  有些属性应该是数据内容，应该用元素标签表示，不应该使用属性表示 <code>&lt;date&gt;1990-2-3&lt;/date&gt; &lt;from&gt;Jenny&lt;/from&gt;</code></p></li>
<li><p>元素名称的命名要求：</p>

<p>  不能以xml（不区分大小写）开始<br/>
  不能以数字和标点符号开始<br/>
  名称之间不能有空格，<code>&lt;first name&gt;</code>错误的命名。</p></li>
<li><p>xml元素必须正确的嵌套。</p></li>
<li><p>形式良好的xml文档满足上面所有的语法要求。</p></li>
</ul>


<p><strong>xml验证：</strong></p>

<p>由xml文档规则直接检验xml文档的正确性。规则由DTD(document type definition)和xml schema定义。两者都定义了xml需满足的要求，schema使用更多。</p>

<p><strong>xml显示: 为xml文档添加显示效果</strong></p>

<p>使用css和XSLT(extensible stylesheet language transformations)显示文档。
语法 <code>&lt;?xml-stylesheet type="text/css" href="cd_catalog.css"?&gt;</code> 或 <code>&lt;?xml-stylesheet type="text/xsl" href="simple.xsl"?&gt;</code>
将样式表或XSLT链接到该xml文档。</p>

<p><strong>xml解析：</strong></p>

<p>首先要获取xml文档对象，然后通过xml DOM获取对象的元素文本内容结合html DOM在html中显示出来。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">xmlhttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="s2">&quot;cd_catalog.xml&quot;</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="nx">xmlDoc</span><span class="o">=</span><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">responseXML</span><span class="p">;</span><span class="c1">//xml文档对象</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;book&quot;</span><span class="p">).</span><span class="nx">innerhtml</span> <span class="o">=</span> <span class="nx">xmlDoc</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;book&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">childNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeValue</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> xml基础测试: </strong></p>

<p>直接做xml测验就ok了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微软2013实习笔试查漏补缺]]></title>
    <link href="http://sleefd.github.com/blog/2013/05/06/ms-intern-write-test/"/>
    <updated>2013-05-06T21:37:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2013/05/06/ms-intern-write-test</id>
    <content type="html"><![CDATA[<p>微软2013暑期实习笔试题部分题目分析。
比较欣慰的是俺通过了这次笔试，哈哈= =</p>

<ul>
<li><em>cdecl 和 </em>stdcall的区别</li>
</ul>


<!-- more -->


<p>原题是c++哪种函数调用方式支持变长参数调用。<br/>
第一直觉是在_cdecl和_stdcall中选，其中一个是由主调函数压栈和弹栈，一个由被调用函数自己压栈和弹栈，但是忘记了谁对应谁。<br/>
然后又联想到printf函数，这个函数是支持变长参数的，推理一下就是默认的调用方式支持变长参数，可惜忘了两者间哪个是默认的调用方式，sigh.</p>

<ol>
<li><p>_stdcall是Pascal程序的缺省调用方式，通常用于Win32 Api中，函数采用从右到左的压栈方式，自己在退出时清空堆栈。VC将函数编译后会在函数名前面加上下划线前缀，在函数名后加上"@"和参数的字节数。 int f(void *p) -->> _f@4(在外部汇编语言里可以用这个名字引用这个函数)</p></li>
<li><p>_cdecl是C调用约定（The C default calling convention），按从右至左的顺序压参数入栈，由调用者把参数弹出栈,。对于传送参数的内存栈是由调用者来维护的（正因为如此，实现可变参数 vararg的函数(如printf)只能使用该调用约定）。另外，在函数名修饰约定方面也有所不同。 <em>cdecl是C和C＋＋程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用</em>stdcall函数的大。函数采用从右到左的压栈方式。VC将函数编译后会在函数名前面加上下划线前缀。</p></li>
<li><p>m*n网格中矩形的总个数</p>

<p>  公式是:<code>sum = m*(m+1)/2*n*(n+1)/2</code>，分析见<a href="">思维的偏见</a></p></li>
<li><p>MVC模式理解</p>

<p>  这种概念题用英文表达后感觉很难选对。<br/>
  MVC是一种软件架构。MVC的核心思想是代码重用和功能分离。<br/>
  model:负责处理数据和数据相关的请求。<br/>
  view:负责显示数据。<br/>
  controller:负责业务逻辑，处理用户的请求，把model层的数据在view层显示出来。</p></li>
<li><p>链表和数组的区别</p>

<p>  A. 当两者都有序时，搜索时间复杂度不同<br/>
B. 动态增加和删除元素<br/>
C. 随即访问效率<br/>
D. 数据存储类型<br/>
选A,B,C,D.<br/>
A:数组二分搜索比链表快，因为链表不支持O(1)的随机访问。<br/>
B:链表增添删除元素容易。<br/>
C:数组支持下标随机访问。<br/>
D:链表的数据存储类型必须为复合类型，数组既可以支持复合类型也可以支持简单类型。</p></li>
<li><p>const使用</p>

<p>  定义整型常量：<br/>
  const int a = 4;<br/>
  int const a = 4;<br/>
  定义指针常量：<br/>
  const int <em>p = &a;<br/>
  int const </em>p = &a; <br/>
  定义常指针:<br/>
  int *const p = &a;</p></li>
<li><p>输出题</p></li>
</ol>


<p>当时没意识到，这是一个指针类型转换问题。从子类指针转为父类指针，数据宽度变小，指针每次移动的大小也变小。</p>

<p>A是父类，有数据long a;B是A的子类，增加数据long b;
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">setA</span><span class="p">(</span><span class="n">A</span> <span class="o">*</span><span class="n">data</span> <span class="p">,</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">data</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="n">B</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="c1">//输出是什么？&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">b</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//输出22221111</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
分析：从B类型的指针转为A类型的指针，指针指向的数据从8个字节变成了4个字节，则每次setA改变 data[i*4]这个位置的值，因此最终结果是22221111</p>

<ul>
<li><p>除法和右移的区别</p>

<p>  题目：F和G、X是32位有符号整数,F = X/2,G = X>>1,最后发现F!=G，这意味着：<br/>
  A. 有编译错误<br/>
  B. X是奇数<br/>
C. X是负数<br/>
D. F-G = 1<br/>
E. G-F = 1</p>

<p>  答案 B,C,D <br/>
分析：
首先X是负数，正数除以2和右移没有区别。
X是负数，右移是在前面补1.随便举例一看，X是奇数且F-G = 1。如果X是负偶数，F=G.</p></li>
<li><p>天平称量问题</p>

<p>  题目：N个球中有一个球比其他球轻，问若称量三次能找到这个次品球，可能的N的取值。<br/>
分析：这个题目在刘未鹏的《暗示间》里面“快排为什么那样快？”这一章有讲解。天平可以处在三种状态:平衡、左轻、右轻。每一次称量，排除三分之一的可能性。称量m次最多可以解决m<sup>3个球的情况。</sup></p></li>
</ul>


<hr />

<p>细细回味了下微软的题，感觉每一题都很有意思。
另外意识到自己的思考能力很弱，思考全面性急需提高。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用markdown写ppt]]></title>
    <link href="http://sleefd.github.com/blog/2013/03/07/markdown-ppt/"/>
    <updated>2013-03-07T20:40:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2013/03/07/markdown-ppt</id>
    <content type="html"><![CDATA[<h4>why markdown?</h4>

<p>最近一直用markdown写blog，深感markdown易于书写的特性。如果markdown能用于写ppt岂不是更好，再加上<a href="http://johnmacfarlane.net/pandoc/">pandoc</a>这个奇妙的工具，那么所有涉及到书写的工作基本上都可以由markdown完成了。</p>

<!-- more -->


<h4>principle</h4>

<p>偶然在Toplanguage上看到有人用<a href="https://github.com/bartaz/impress.js">impress.js</a>做的html格式的ppt，简洁而且可以直接丢在网上，感觉非常有趣。于是开始研究原理，发现其实很直观：强大的javascript+css3即可以实现很绚丽的ppt效果（其实前端开发也很有挑战性嘛~）。ppt书写可以直接由markdown,html,textile等语言完成，very nice~</p>

<p>花时间研究了一下，发现支持html ppt制作的template很多，比如deck.js,impress.js，reveal.js等等。最后找到了<a href="http://slideshow.rubyforge.org/">slideshow</a>这个ruby gem，易用而且支持上面提到的各种template，特此推荐。</p>

<h4>slideshow</h4>

<p>slideshow可以将markdown或textile等文件解析成ppt，所有的ppt页面都在一个html页中，因此你可以直接把这个html放在自己的网站上，供别人访问。</p>

<p>slideshow安装方法如下：<br/>
1. 安装ruby和ruby gems<br/>
2. gem install slideshow #安装slideshow gem</p>

<p>使用时直接 <code>slideshow test.md</code> 即可将test.md解析成test.html，双击打开就是一个ppt，方向键控制播放,F11全屏浏览，very simple.</p>

<p>与test.html同时生成的还有s6文件夹，包含s6模版文件；test.css，html样式表。<br/>
slideshow默认为s6模版。安装其他模版输入命令以deck.js为例：<br/>
'slideshow -f deck.js'</p>

<p>自己做了一个<a href="http://sleefd.github.com/denclue">demo</a>，关于密度聚类算法的ppt。<a href="/denclue/denclue.md">示例markdown</a>。</p>

<hr>


<p>slideshow参考:<a href="http://slideshow.rubyforge.org/">slideshow</a><br/>
推荐网站 <a href="www.rvl.io.">reveal</a>，支持在线ppt编辑，可直接生成一个在线浏览链接，非常方便。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译安装第三方lib]]></title>
    <link href="http://sleefd.github.com/blog/2013/02/27/use-third-library/"/>
    <updated>2013-02-27T22:08:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2013/02/27/use-third-library</id>
    <content type="html"><![CDATA[<h3>编译运行基本步骤</h3>

<p>./comfigure  #生成makefile，configure文件一般是Linux下可执行脚本<br/>
make  #编译<br/>
make install #安装文件<br/>
make uninstall #卸载文件</p>

<!--more-->


<h3>版本</h3>

<p>source distribution 源代码版本。第三方库或软件的源代码，需要自己编译才能使用。<br/>
源代码版本需要经过上述三个步骤才能执行。<br/>
binary distribution 二进制版本即可执行版本，已编译好的，在特点平台上可直接运行安装的。</p>

<h3>平台</h3>

<p>windows下使用源代码版本的软件或库，需要自己写makefile，然后make,make install.平时我们使用复杂的IDE如visual studio等，可以直接编译运行，不需要
自己写makefile，上述三个步骤已由IDE自己完成。</p>

<p>linux下源码包以压缩包的形式存在，需先解压，然后cd到所在目录，再输入上述三个命令即可。
注意阅读源码包中的readme和install文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress博客搭建中问题汇总及解决方法]]></title>
    <link href="http://sleefd.github.com/blog/2012/12/28/build-problems/"/>
    <updated>2012-12-28T20:53:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2012/12/28/build-problems</id>
    <content type="html"><![CDATA[<ol>
<li><p>bundle install时，ffi包装不上：</p>

<p>将gemfile.lock文件中所有涉及到ffi版本号的地方都改为ffi (~>1.1.1)<a href="http://michael-roshen.iteye.com/blog/1613151">【参考】</a><!--more--></p></li>
<li><p>bundle install时，安装某个包提示<code>&gt; ERROR: Failed to build gem native extension.</code></p>

<ul>
<li><a href="http://rubyinstaller.org/downloads/">安装Devkit</a></li>
<li>配置环境变量path为devkit下的bin目录</li>
<li><p>执行代码</p>

<p><code>
ruby dk.rb init<br/>
ruby dk.rb install
</code></p></li>
</ul>
</li>
<li><p>rake generate失败</p>

<ul>
<li>检查_config.yml，注意每个冒号后面都有空格</li>
<li>大多数原因是中文解析问题。<br/>
首先所有的markdown文件应为UTF-8格式，然后修改
你ruby安装目录下的convertible.rb：<br/>
<code>
self.content = File.read(File.join(base, name))改为<br/>
self.content = File.read(File.join(base, name), :encoding => "UTF-8")
</code></li>
</ul>
</li>
<li><p>使用模版的方法：<br/>
RTFM:一定要看模版说明<br/>
通过修改_config.yml中的相关变量来基于模版个性化自己的博客。</p></li>
<li><p>使用<code>&lt;!-- more --&gt;</code>来显示post中的部分内容。该标签后的所有内容将不被显示。</p></li>
<li><p>配置disqus的方法：</p>

<ul>
<li>注册disqus id，配置与你的站点关联，取一个站点shortname，记住它，很重要。</li>
<li>设置_config.yml中disqus部分：<br/>
disqus_short_name: 站点shortname<br/>
disqus_show_comment_count: true</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
