<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Bright Shine]]></title>
  <link href="http://sleefd.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://sleefd.github.com/"/>
  <updated>2014-01-21T10:56:06+08:00</updated>
  <id>http://sleefd.github.com/</id>
  <author>
    <name><![CDATA[slee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python入门(1)]]></title>
    <link href="http://sleefd.github.com/blog/2013/03/20/python-begin/"/>
    <updated>2013-03-20T13:15:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2013/03/20/python-begin</id>
    <content type="html"><![CDATA[<p>参考： http://blog.sina.com.cn/s/blog_a36b03a90101cyun.html</p>

<p>python是面向对象的，解释执行的，跨平台的，自己内存管理的脚本语言。</p>

<!-- more -->


<p><strong>弱类型语言</strong>：不需要申明变量的类型。<br/>
i,j = 3,4; #i=3,j=4</p>

<p><strong>两种变量类型</strong>：数值类型和引用类型。<br/>
除了数值之外，其他类型都是引用类型。比如list,元组等等。</p>

<h3>数值类型</h3>

<blockquote><p>long型可以是任意长度，数字常量后加l或L<br/>
复数类型: 3+4j or 3+4J</p></blockquote>

<h3>运算</h3>

<ul>
<li>四则元素： +、-、*、/、%</li>
<li>幂运算： **    &nbsp; &nbsp; 2 ** 3 = 8</li>
<li>逻辑运算： and or not</li>
<li>bool运算：is    ,   is not   ,   in ,    not in</li>
<li>位运算：&amp; | ~ ^</li>
</ul>


<h3>字符串</h3>

<ul>
<li><p>特点：<br/>
'' or "" 括起来的字符序列  <br/>
r'\n' 或 R'\n'不转义字符<br/>
用"""括起来，可包含换行字符串<br/>
与java一样字符串无法改变</p></li>
<li><p>操作：
乘法 表示重复字符串<br/>
分片:和matlab矩阵一样A[1:3]<br/>
长度: len(str)<br/>
遍历: for x in str:<br/>
格式化字符串：一种操作，like printf<br/>
(this is "%s") %(str)</p></li>
<li><p>索引 从0开始，可以反向索引 从-1开始</p></li>
</ul>


<h3>内置复杂类型</h3>

<ul>
<li><p>列表 []括起来，元素可变，可保存任意对象，可动态增长<br/>
操作： append() /sort() index()  /reverse() / del list[1] <br/>
列表的分片，+，*操作产生新列表<br/>
  list = 1,2,3 #可省略括号</p></li>
<li><p>元组 （）括起来，非可变序列，可保存任意对象</p></li>
<li><p>字典
类似c++中的map</p>

<blockquote><p>{}括起来 {key:value, key2:value}<br/>
m.has_key()<br/>
m.keys() #返回所有键值组成的列表<br/>
m.values() #返回所有值组成的列表<br/>
len(m)<br/>
del m[k]</p></blockquote></li>
</ul>


<h3>比较</h3>

<p>== 比较字面值<br/>
is 比较引用</p>

<h3>标准输入输出：</h3>

<p>str = raw_input("plz input something\n");<br/>
print "hello,world"<br/>
文件读写操作： 和c相同<br/>
输入： input = open("in.txt" , "r");</p>

<pre><code>           s = input.read();
          s = input.read(N);
           readline();#返回string
           readlines() ; #返回list
</code></pre>

<p>输出: output = open("out.txt" , "w");</p>

<pre><code>     output.write(s);
     output.writelines(list);
</code></pre>

<p>output.close();</p>

<h3>流程控制</h3>

<p>if条件判断：</p>

<pre><code>if 条件：
    elif:
else:
</code></pre>

<p>while循环</p>

<pre><code>while 条件:
else:
</code></pre>

<p>for循环</p>

<pre><code>for x in str:
     do sth
else:
</code></pre>

<h3>函数定义</h3>

<p>def fun(params):
无需指明返回值，直接return 就行。<br/>
没有return时，返回none</p>

<p>python module 类似于java中的lib，里面定义一些可以被使用的函数<br/>
import module 或者from module import*</p>

<p><strong>doc</strong>文档字符串，每个对象都有这个属性，显示对象的说明文字，输出用"""包含的内容<br/>
<strong>name</strong>模块属性：如果是调用的模块，则module.<strong>name</strong>输出模块名 如果是直接运行该模块则等于<strong>main</strong></p>
]]></content>
  </entry>
  
</feed>
