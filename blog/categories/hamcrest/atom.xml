<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hamcrest | Bright Shine]]></title>
  <link href="http://sleefd.github.com/blog/categories/hamcrest/atom.xml" rel="self"/>
  <link href="http://sleefd.github.com/"/>
  <updated>2014-02-17T11:55:58+08:00</updated>
  <id>http://sleefd.github.com/</id>
  <author>
    <name><![CDATA[slee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hamcrest IsEqual实现]]></title>
    <link href="http://sleefd.github.com/blog/2014/01/27/ham-isequal/"/>
    <updated>2014-01-27T11:15:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2014/01/27/ham-isequal</id>
    <content type="html"><![CDATA[<p>学习一下IsEqual类的实现。该Matcher用来比较两个对象是否equal。
核心逻辑在areEqual()方法内。</p>

<ol>
<li>首先判断是否都为null</li>
<li>判断是否为数组。若都是数组，则先比较数组长度是否相等，然后比较数组中元素是否相等，数组元素相等直接递归调用areEqual()方法。因为该数组可能是多维数组，直接调用equals不合理。</li>
<li>非1，2两种情况直接调用equals()比较。</li>
</ol>


<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>areEqual() </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">areEqual</span><span class="o">(</span><span class="n">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">o1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">o2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//是否为null</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">o1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">o2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">isArray</span><span class="o">(</span><span class="n">o1</span><span class="o">))</span> <span class="o">{</span> <span class="c1">//是否是数组</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">isArray</span><span class="o">(</span><span class="n">o2</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">areArraysEqual</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">//equals()直接比较</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>mark:</p>

<ol>
<li><p>判断一个object是否是数组:</p>

<p>object.getClass().isArray() <br/>
Arrays.equals() /Arrays.deepEquals()比较两个数组是否相同</p></li>
<li><p>集合类重写了equals方法。比较两个集合是否形同，直接调用equals方法就ok了。只要集合中的元素也重写了equals方法就没有任何问题。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义hamcrest matcher]]></title>
    <link href="http://sleefd.github.com/blog/2014/01/26/hamcrest-define-matcher/"/>
    <updated>2014-01-26T12:17:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2014/01/26/hamcrest-define-matcher</id>
    <content type="html"><![CDATA[<p>当hamcrest matcher无法满足我们需求的时候，需要自己定义matcher.</p>

<p>做法很简单，参照hamcrest.core下面的任何一个Matcher来写就ok.</p>

<ol>
<li>定义一个Matcher类,extends BaseMatcher<T></li>
<li>重写matchers方法。该方法定义比较器的真正逻辑:怎样比较。</li>
<li>重写describeTo(Description description). 该方法描述这个matcher，可用于输出错误信息。将需要输出的信息append到description上。<!--more--></li>
<li>提供一个工厂方法，用来获取该Matcher对象</li>
</ol>


<p>下面以一个BiggerThan比较器为例，该比较器用来比较两个数字的大小</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BiggerThan.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.hamcrest.BaseMatcher</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hamcrest.Description</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hamcrest.Matcher</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Created</span> <span class="n">by</span> <span class="n">slee</span> <span class="n">on</span> <span class="mi">14</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="mi">22</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">self</span> <span class="n">defined</span> <span class="n">a</span> <span class="n">biggerThan</span> <span class="n">matcher</span> <span class="k">for</span> <span class="n">comparing</span> <span class="n">primitive</span> <span class="n">types</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BiggerThan</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">BaseMatcher</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">BiggerThan</span><span class="o">(</span><span class="n">T</span> <span class="n">operand</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="n">operand</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">matches</span><span class="o">(</span><span class="n">Object</span> <span class="n">actual</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">actual</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(((</span><span class="n">Number</span><span class="o">)</span> <span class="n">actual</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">object</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;can&#39;t compare none Number type.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">describeTo</span><span class="o">(</span><span class="n">Description</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">description</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;bigger than &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">description</span><span class="o">.</span><span class="na">appendValue</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">Matcher</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">biggerThan</span><span class="o">(</span><span class="n">T</span> <span class="n">operand</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">BiggerThan</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">operand</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hamcrest一瞥]]></title>
    <link href="http://sleefd.github.com/blog/2014/01/21/hamcrest/"/>
    <updated>2014-01-21T19:59:00+08:00</updated>
    <id>http://sleefd.github.com/blog/2014/01/21/hamcrest</id>
    <content type="html"><![CDATA[<p>hamcrest是一个Matcher库，有java版，python,c++版等。它提供了很多比较器用来比较两个对象。其并不是一个测试框架，只是因为Matcher可以在测试断言中用到，而被测试框架和Mock框架集成，比如Junit4,EasyMock.</p>

<p>hamcrest库由两大部分组成:Matcher<T>和Description。<br/>
Matcher体系定义了常用的比较器，比如equal，not，same等，每个core matcher继承BaseMatcher,实现matches方法来做比较。</p>

<p>Description体系用来描述每个Matcher，输出Matcher错误信息。比如expected: is(..), got: ..。</p>

<!-- more -->


<h3>hamcrest core matcher</h3>

<p>参见 org.hamcrest.CoreMatchers<br/>
anyOf(mathcher1,mather2..):   满足任何一个matcher即为真，参数为matchers  <br/>
allOf(matcher1,matcher2...): 满足所有matcher，则为真<br/>
anything(): 永远为真<br/>
any(class<T>): 任何T类型，则为真
equalTo(): 是否相等，使用equals比较
nullValue(): 空值为真
instanceOf(): 判断是否为某个类的实例<br/>
is(matcher): 装饰现有matcher，提高代码可读性<br/>
sameInstance(): 是否为同一实例
assertThat(actual, is(expected)): junit断言和is，提高readability</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hamcrest例子 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.*;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsAnything</span><span class="o">.</span><span class="na">any</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Created</span> <span class="n">by</span> <span class="n">slee</span> <span class="n">on</span> <span class="mi">14</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="mi">21</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HamcrestTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_hamcrest_matcher</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//asserts below are all passed</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span> <span class="o">,</span><span class="n">is</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">));</span> <span class="c1">//readable code</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span> <span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)));</span> <span class="c1">//readable code</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">notNullValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">any</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span> <span class="c1">//readable</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">anyOf</span><span class="o">(</span><span class="n">nullValue</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">allOf</span><span class="o">(</span><span class="n">notNullValue</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">instanceOf</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">s</span> <span class="o">,</span><span class="n">is</span><span class="o">(</span><span class="n">sameInstance</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>自定义hamcrest matcher(<a href="http://sleefd.github.io/blog/2014/01/26/hamcrest-define-matcher/">link</a>)</h3>
]]></content>
  </entry>
  
</feed>
